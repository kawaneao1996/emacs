#+title: Kawane's Emacs Config
#+author: Kawaneao1996
* PACKAGE MANAGEMENT
ここではuse-packageの代わりにleafを使ってemacsの設定を記述する。
どうしてleafを使用するかというと、leafのほうが起動時間が短くなるらしいからである。
* setup leaf.el
#+begin_src elisp
;;; init.el --- My init.el  -*- lexical-binding: t; -*-

;; Copyright (C) 2020  Naoya Yamashita

;; Author: Naoya Yamashita <conao3@gmail.com>

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; My init.el.

;;; Code:

;; this enables this running method
;;   emacs -q -l ~/.debug.emacs.d/init.el
(eval-and-compile
  (when (or load-file-name byte-compile-current-file)
    (setq user-emacs-directory
          (expand-file-name
           (file-name-directory (or load-file-name byte-compile-current-file))))))

(eval-and-compile
  (customize-set-variable
   'package-archives '(("gnu"   . "https://elpa.gnu.org/packages/")
                       ("melpa" . "https://melpa.org/packages/")
                       ("org"   . "https://orgmode.org/elpa/")
                       ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
  (package-initialize)
  (unless (package-installed-p 'leaf)
    (package-refresh-contents)
    (package-install 'leaf))

  (leaf leaf-keywords
    :ensure t
    :init
    ;; optional packages if you want to use :hydra, :el-get, :blackout,,,
    (leaf hydra :ensure t)
    (leaf el-get :ensure t)
    (leaf blackout :ensure t)

    :config
    ;; initialize leaf-keywords.el
    (leaf-keywords-init)))

#+end_src
* 組み込みの設定
#+begin_src elisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (set-language-environment "Japanese")
  (prefer-coding-system 'utf-8)
  (set-default 'buffer-file-coding-system 'utf-8)
  (setq display-time-24hr-format t)
  ;; (display-time)
  (display-battery-mode t)
  (setq toggle-truncate-line t)
  ;; 直前/直後の括弧に対応する括弧を光らせます。
  (show-paren-mode)
  ;;括弧の自動補完
  (electric-pair-mode 1)
  ;; highlight entire bracket expression
  ;;http://takeisamemo.blogspot.com/2013/07/emacs.html
  (setq show-paren-style 'expression)
  ;;カーソルの点滅を消す
  (blink-cursor-mode 0)
  ;; echo エリアの表示時間
  (setq echo-keystrokes 0.1)
  ;; echo エリアの表示時間
  (setq echo-keystrokes 0.1)
  ;; linumよりも早い行数表示
  ;; https://garaemon.hatenadiary.jp/entry/2018/07/08/181003
  (leaf leaf-convert
    :config
    (global-display-line-numbers-mode)
    )

  (global-set-key (kbd "C-c t") 'display-line-numbers-mode)
  (global-set-key (kbd "C-c T") 'toggle-truncate-lines)
  ;; 直前/直後の括弧に対応する括弧を光らせます。
  (show-paren-mode)

  ;;括弧の自動補完
  (electric-pair-mode 1)

  ;; highlight entire bracket expression
  ;;http://takeisamemo.blogspot.com/2013/07/emacs.html
  (setq show-paren-style 'expression)

  ;;カーソルの点滅を消す
  (blink-cursor-mode 0)
  ;; emacs の起動画面を消す
  ;; https://pcvogel.sarakura.net/2013/06/17/31151
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)

  ;; オートセーブファイルを ~/.emacs.d/backupにつくる
  (setq auto-save-file-name-transforms
        `((".*" ,(expand-file-name "~/.emacs.d/backup/") t)))

  ;; back up の設定
  ;;https://teratail.com/questions/175012
  ;; バックアップファイルを ~/.emacs.d/backupにつくる
  (setq make-backup-files t)
  (setq backup-directory-alist
        (cons (cons "\.*$" (expand-file-name "~/.emacs.d/backup"))
              backup-directory-alist))

(setq default-frame-alist (append
			   (list
			    ;; '(font . "cica-16")
                '(font . "SourceHanCodeJP-13")
                )
			   default-frame-alist))

#+end_src
* leafで書いてある設定
** macrostep
#+begin_src elisp
    (leaf macrostep
    :ensure t
    :bind (("C-c e" . macrostep-expand)))

#+end_src

** imenu
#+begin_src elisp
  (leaf leaf
  :config
  (leaf leaf-convert :ensure t)
  (leaf leaf-tree
    :ensure t
    :custom ((imenu-list-size . 30)
             (imenu-list-position . 'right)
             )))
  (setq org-imenu-depth 3)
#+end_src

** org

*** org capture
#+begin_src elisp
  ;; org-capture
  ;; キーバインドの設定
  (global-set-key (kbd "C-c c") 'org-capture)
  (setq work-directory "~/デスクトップ/org/")
  (setq memofile (concat work-directory "memo.org"))
  (setq todofile (concat work-directory "TODO.org"))
  (setq org-capture-templates
        '(
          ("m" "メモ" entry (file+headline memofile "memo")
           "** %?\n*** 参考\n\nEntered on %U\n %i\n %a\n")

          ("p" "プログラミングノート" entry (file+headline  memofile "Programming note")
           "** %? \n - \n   - ヘッダ：\n   - 形式:\n   - 返却値：\n\nEntered on %U\n %i\n %a\n")

          ("c" "チェックボックス" checkitem (file+headline   todofile "checkbox")
           "[ ] %? \n")
          ("t" "TODO" entry (file+headline todofile "ToDo")
           "*** TODO [/] %?\n- [ ] \nCAPTURED_AT: %U\n %i\n")

          ("r" "調査内容" entry (file+headline memofile "Reserch")
           "** %?\nEntered on %U\n %i\n %a\n")

          ("S" "学習内容" entry (file+headline memofile "Study")
           "** %?\nEntered on %U\n %i\n %a\n")

          ("w" "単語帳" item (file+headline memofile "words")
           "- %?\nEntered on %U\n %i\n %a\n")

          ("W" "単語帳（複数語）" entry (file+headline memofile "words")
           "** %?\n - \nEntered on %U\n %i\n %a\n")

          ("l" "記録" entry (file+headline memofile "Log")
           "** %?\nEntered on %U\n %i\n %a\n")

          ("s" "文章" entry (file+headline memofile "文章")
           "** %?\nEntered on %U\n %i\n %a\n")

          ("i" "アイデア" entry (file+headline memofile "アイデア")
           "* %?\nEntered on %U\n %i\n %a\n")

          ("b" "経済" entry (file+headline memofile "Business")
           "** %?\nEntered on %U\n %i\n %a\n")
          )
        )
  (leaf leaf-convert
  :preface
  (defun show-org-buffer (file)
    "Show an org-file FILE on the current buffer."
    (interactive)
    (if (get-buffer file)
	(let ((buffer (get-buffer file)))
	  (switch-to-buffer buffer)
	  (message "%s" file))
      (find-file
       (concat "~/デスクトップ/org/" file))))

  :config
  (global-set-key
   (kbd "C-M-^")
   '(lambda nil
      (interactive)
      (show-org-buffer "memo.org"))))
#+end_src

*** org journal
#+begin_src elisp
  (leaf leaf-convert
    :bind (("l" . org-store-link)
           ("c" . org-capture)
           ("a" . org-agenda)
           ("b" . org-iswitchb))
    :require org-journal)

  (global-set-key (kbd "C-c C-j") 'org-journal-new-entry)

#+end_src

*** org agenda
#+begin_src elisp
  (setq org-agenda-files `(,todofile ))
  ;;https://emacs.stackexchange.com/questions/36307/showing-deadline-time-in-agenda-view
  (add-to-list 'org-agenda-custom-commands
               '("d" "Deadlines"
                 tags "+DEADLINE>=\"<today>\"&DEADLINE<=\"<+2m>\""
                 ((org-agenda-overriding-columns-format
                   "%25ITEM %DEADLINE %TAGS")))
               )

#+end_src

*** org babel
#+begin_src elisp
  ;; https://takaxp.github.io/org-ja.html#Top
;; shellに関して
;; https://blog.symdon.info/posts/1641896576/
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (R . t)
   (lisp . t)
   (sql . t)
   (C . t)
   (dot . t)
   (gnuplot . t)
   (org . t)
   (python . t)
   (scheme . t)
   (shell . t)
   (java . t)
   (latex . t)
   (ditaa . t)
   (ocaml . t)
   ))

(setq org-confirm-babel-evaluate nil)

#+end_src

** undo-tree
#+begin_src elisp
    (leaf undo-tree
      :global-minor-mode global-undo-tree-mode)
    ;;undo-treeでlinum-modeの設定
  ;;https://www.emacswiki.org/emacs/UndoTree
  (defun undo-tree-visualizer-update-linum (&rest args)(linum-update undo-tree-visualizer-parent-buffer)(advice-add 'undo-tree-visualize-undo :after #'undo-tree-visualizer-update-linum)(advice-add 'undo-tree-visualize-redo :after #'undo-tree-visualizer-update-linum)(advice-add 'undo-tree-visualize-undo-to-x :after #'undo-tree-visualizer-update-linum)(advice-add 'undo-tree-visualize-redo-to-x :after #'undo-tree-visualizer-update-linum)(advice-add 'undo-tree-visualizer-mouse-set :after #'undo-tree-visualizer-update-linum)(advice-add 'undo-tree-visualizer-set :after #'undo-tree-visualizer-update-linum))
;; undo-treeの一時ファイルを1箇所に集める
;; https://www.reddit.com/r/emacs/comments/tejte0/undotree_bug_undotree_files_scattering_everywhere/
;; Prevent undo tree files from polluting your git repo
(setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
#+end_src

** counsel,ivy
#+begin_src elisp
  (leaf leaf-convert
  :bind (("" . swiper)
     ("M-x" . counsel-M-x)
     ("C-x C-f" . counsel-find-file)
     ("M-y" . counsel-yank-pop)
     ("<f1> f" . counsel-describe-function)
     ("<f1> v" . counsel-describe-variable)
     ("<f1> l" . counsel-find-library)
     ("<f2> i" . counsel-info-lookup-symbol)
     ("<f2> u" . counsel-unicode-char)
     ("<f2> j" . counsel-set-variable)
     ("C-x b" . ivy-switch-buffer)
     ("C-c v" . ivy-push-view))
  :setq ((search-default-mode function char-fold-to-regexp)
     (ivy-use-virtual-buffers . t)
     (ivy-count-format . "(%d/%d) "))
  :config
  (ivy-mode 1))
  (global-set-key (kbd "C-c V") 'ivy-pop-view)
#+end_src

** beacon
#+begin_src elisp
  (leaf beacon
    :doc "カーソルを移動した際に点滅される"
    :url "https://github.com/Malabarba/beacon"
  :init
  (let ((custom--inhibit-theme-enable nil))
    (unless (memq 'use-package custom-known-themes)
      (deftheme use-package)
      (enable-theme 'use-package)
      (setq custom-enabled-themes (remq 'use-package custom-enabled-themes)))
    (custom-theme-set-variables 'use-package
                '(beacon-color "green" nil nil "Customized with use-package beacon")))
  :require t
  :config
  (beacon-mode 1))
#+end_src

** end-mark

#+begin_src elisp
  ;;; end-mark.el --- Show mark at the end of buffer

;; Author: INA Lintaro <ina@kuis.kyoto-u.ac.jp>

;;; License:

;; NYSL Version 0.9982 (en)
;; ----------------------------------------
;; A. This software is "Everyone'sWare". It means:
;;   Anybody who has this software can use it as if you're
;;   the author.
;;
;;   A-1. Freeware. No fee is required.
;;   A-2. You can freely redistribute this software.
;;   A-3. You can freely modify this software. And the source
;;       may be used in any software with no limitation.
;;   A-4. When you release a modified version to public, you
;;       must publish it with your name.
;;
;; B. The author is not responsible for any kind of damages or loss
;;   while using or misusing this software, which is distributed
;;   "AS IS". No warranty of any kind is expressed or implied.
;;   You use AT YOUR OWN RISK.
;;
;; C. Copyrighted to INA Lintaro
;;
;; D. Above three clauses are applied both to source and binary
;;   form of this software.

;;; Commentary:

;; Show mark at the end of buffer.
;;
;; To use this mode, copy end-mark.el to your load path
;; and add to your .emacs:
;;
;;   (require 'end-mark)
;;
;; Then M-x end-mark-on enables end-mark-mode in the current buffer.
;;
;; To automatically enable end-mark-mode in every buffers, add to your .emacs:
;;
;;   (global-end-mark-mode)

;;; Code:

(defconst end-mark-version "0.01")

(defgroup end-mark nil
  "Show mark at the end of buffer"
  :group 'convenience)

(defcustom end-mark-string "[EOF]"
  "String used to indicate the end of buffer."
  :group 'end-mark
  :type 'string)

(defface end-mark-face
  '((((class color) (min-colors 88) (background dark))
     :foreground "seagreen1")
    (((class color) (min-colors 88) (background light))
     :foreground "seagreen3")
    (((class color) (min-colors 16))
     :foreground "brightgreen")
    (((class color) (min-colors 8))
     :background "green" :foreground "white")
    (((type tty) (class mono))
     :inverse-video t)
    (t :background "gray"))
  "Face of the end mark."
  :group 'end-mark)

(defcustom end-mark-face 'end-mark-face
  "Face of the end mark."
  :group 'end-mark
  :type 'face)

(defcustom end-mark-exclude-modes '(dired-mode hexl-mode term-mode)
  "List of major mode symbols not to enable end-mark-mode automatically."
  :group 'end-mark
  :type '(repeat (symbol :tag "Major Mode")))

(defcustom end-mark-mode-buffers-regexp '("^\\*scratch\\*$")
  "List of regular expressions of buffer names to enable end-mark-mode automatically."
  :group 'end-mark
  :type '(repeat 'string))

(defcustom end-mark-exclude-buffers-regexp '("^ .*" "^\\*")
  "List of regular expressions of buffer names not to enable end-mark-mode automatically."
  :group 'end-mark
  :type '(repeat 'string))

(defvar end-mark-overlay nil)
(make-variable-buffer-local 'end-mark-overlay)

(defun end-mark-overlay-p () end-mark-overlay)

(defun end-mark-adjust ()
  (interactive)
  (when (end-mark-overlay-p)
    (move-overlay end-mark-overlay (point-max) (point-max))))

;;;###autoload
(define-minor-mode end-mark-mode
  "Toggle display of mark at the end of buffer."
  :lighter ""                           ; for desktop.el
  (if end-mark-mode
    (progn
      ;; destructor
      (make-local-variable 'change-major-mode-hook)
      (add-hook 'change-major-mode-hook 'end-mark-off)
      ;; end mark object
      (unless (end-mark-overlay-p)
        (setq end-mark-overlay (make-overlay (point-max) (point-max))))
      ;; overlay face
      (set-text-properties 0 (length end-mark-string)
                           `(face ,end-mark-face) end-mark-string)
      (overlay-put end-mark-overlay 'after-string end-mark-string)
      ;; auto adjust
      (overlay-put end-mark-overlay 'insert-behind-hooks
                   '((lambda (overlay after beg end &optional len)
                       (when after (end-mark-adjust))))))
    (when (end-mark-overlay-p)
      (delete-overlay end-mark-overlay)
      (setq end-mark-overlay nil))
    (remove-hook 'change-major-mode-hook 'end-mark-off t)))

;;;###autoload
(define-globalized-minor-mode
  global-end-mark-mode end-mark-mode end-mark-install)

(defun end-mark-off ()
  (interactive)
  (end-mark-mode 0))

(defun end-mark-on ()
  (interactive)
  (end-mark-mode 1))

;;; adjust when inserting file
(add-hook 'after-insert-file-functions
          '(lambda (count) (end-mark-adjust) count))

;;; install
(defun end-mark-install ()
  (let ((buf (buffer-name (current-buffer)))
        (mem-pat
         '(lambda (x l)
            (member t (mapcar '(lambda (r) (when (string-match r x) t)) l)))))
    (when (and (not (minibufferp))
               (not (buffer-base-buffer))
               (or (funcall mem-pat buf end-mark-mode-buffers-regexp)
                   (not (funcall mem-pat buf end-mark-exclude-buffers-regexp)))
               (null (memq major-mode end-mark-exclude-modes)))
      (end-mark-on))))

(provide 'end-mark)
;;; end-mark.el ends here
(leaf leaf-convert
  :hook ((org-mode-hook . end-mark-off))
  :require end-mark
  :config
  (global-end-mark-mode))
#+end_src

** reinbow-delimeters
#+begin_src elisp
  ;;rainbow-delimeter

  ;;https://github.com/Fanael/rainbow-delimiters
  ;;customization
  ;;M-x customize-group rainbow-delimiters
  (leaf leaf-convert
    :hook ((prog-mode-hook . rainbow-delimiters-mode))
    :require rainbow-delimiters)
  ;; 括弧の色を強調する設定
  (leaf leaf-convert
    :preface
    (defun rainbow-delimiters-using-stronger-colors nil
      (interactive)
      (cl-loop for index from 1 to rainbow-delimiters-max-face-count do
               (let ((face (intern
                            (format "rainbow-delimiters-depth-%d-face" index))))
                 (cl-callf color-saturate-name (face-foreground face)
                   30))))

    :hook ((prog-mode-hook . rainbow-delimiters-using-stronger-colors))
    :require cl-lib color)

#+end_src

** company
#+begin_src elisp
  (leaf company
    :ensure t
    :bind ((company-active-map
            ("C-n" . company-select-next)
            ("C-p" . company-select-previous)
            ("C-s" . company-filter-candidates)
            ("<tab>" . company-complete-selection))
           (company-search-map
            ("C-n" . company-select-next)
            ("C-p" . company-select-previous)))
    :config
    (with-eval-after-load 'company
      (add-hook 'prog-mode-hook 'company-mode)
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 2)
      (setq company-selection-wrap-around t)
      (setq company-show-numbers t)))
  (leaf company-tabnine
    :ensure t
    :require t
    :config
    (add-to-list 'company-backends #'company-tabnine))
  ;; https://misohena.jp/blog/2021-08-08-emacs-company-mode-settings.html
  ;; case3
  ;; 基本的に候補は無選択状態から始める。
  ;; 誤って確定してしまうのを防ぐ。
  (setq-default company-selection-default nil)
  (setq-default company-selection nil)

#+end_src

** flycheck
#+begin_src elisp
  (leaf flycheck
  :doc "On-the-fly syntax checking"
  :req "dash-2.12.1" "pkg-info-0.4" "let-alist-1.0.4" "seq-1.11" "emacs-24.3"
  :tag "minor-mode" "tools" "languages" "convenience" "emacs>=24.3"
  :url "http://www.flycheck.org"
  :ensure t
  :bind (("M-n" . flycheck-next-error)
         ("M-p" . flycheck-previous-error))
  :global-minor-mode global-flycheck-mode)
#+end_src

** dashboard
#+begin_src elisp
  (leaf leaf-convert
    :setq ((dashboard-items quote
                            ((recents . 10)
                             (projects . 10)))
                                          ; Set the title
           (dashboard-banner-logo-title . "永遠に生きる")
           (dashboard-set-footer)
           (dashboard-startup-banner quote logo)
           (dashboard-set-file-icons . t)
           (dashboard-set-heading-icons . t)
           (dashboard-startup-banner . "~/.emacs.d/emacs_logo_114_2.png")
           ;; (dashboard-startup-banner . "~/.emacs.d/blackhole.png")
           ;; (dashboard-startup-banner . "~/ピクチャ/自作/ブラックホールのようなχ.png")
           )
    :config
    (leaf dashboard
      :ensure t
      :require t
      :config
      (dashboard-setup-startup-hook)))

  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
#+end_src
* use-package(require)で書いてある設定
#+begin_src elisp
  (require 'use-package) 
(use-package all-the-icons
  :if (display-graphic-p))

#+end_src
* よくわかってないやつ/使うか迷っているやつ
** company slime
#+begin_src elisp
  (leaf leaf-convert
  :bind ((company-active-map
	  ("" . company-select-next))
	 (company-active-map
	  ("" . company-select-previous))
	 (company-active-map
	  ("" . company-show-doc-buffer))
	 (company-active-map
	  ("M-." . company-show-location)))
  :setq ((inferior-lisp-program . "/usr/bin/sbcl"))
  :config
  (slime-setup
   '(slime-company)))
#+end_src
** ace-jump
#+begin_src elisp
  (leaf ace-jump-mode
  :ensure t
  :bind (("C-c j" . ace-jump-mode)))
#+end_src
* end leaf.el
#+begin_src elisp
  
(provide 'init)

;; Local Variables:
;; indent-tabs-mode: nil
;; End:

;;; init.el ends here

#+end_src
