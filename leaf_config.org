#+title: Kawane's Emacs Config
#+author: Kawaneao1996
* PACKAGE MANAGEMENT
ここではuse-packageの代わりにleafを使ってemacsの設定を記述する。
どうしてleafを使用するかというと、leafのほうが起動時間が短くなるらしいからである。
* setup leaf.el
#+begin_src elisp
;;; init.el --- My init.el  -*- lexical-binding: t; -*-

;; Copyright (C) 2020  Naoya Yamashita

;; Author: Naoya Yamashita <conao3@gmail.com>

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; My init.el.

;;; Code:

;; this enables this running method
;;   emacs -q -l ~/.debug.emacs.d/init.el
(eval-and-compile
  (when (or load-file-name byte-compile-current-file)
    (setq user-emacs-directory
          (expand-file-name
           (file-name-directory (or load-file-name byte-compile-current-file))))))

(eval-and-compile
  (customize-set-variable
   'package-archives '(("gnu"   . "https://elpa.gnu.org/packages/")
                       ("melpa" . "https://melpa.org/packages/")
                       ("org"   . "https://orgmode.org/elpa/")
                       ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
  (package-initialize)
  (unless (package-installed-p 'leaf)
    (package-refresh-contents)
    (package-install 'leaf))

  (leaf leaf-keywords
    :ensure t
    :init
    ;; optional packages if you want to use :hydra, :el-get, :blackout,,,
    (leaf hydra :ensure t)
    (leaf el-get :ensure t)
    (leaf blackout :ensure t)

    :config
    ;; initialize leaf-keywords.el
    (leaf-keywords-init)))

#+end_src
* 組み込みの設定
#+begin_src elisp
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (set-language-environment "Japanese")
    (prefer-coding-system 'utf-8)
    (set-default 'buffer-file-coding-system 'utf-8)
    (setq display-time-24hr-format t)
    ;; (display-time)
    (display-battery-mode t)
    (setq toggle-truncate-line t)
    ;; 直前/直後の括弧に対応する括弧を光らせます。
    (show-paren-mode)
    ;;括弧の自動補完
    (electric-pair-mode 1)
    ;; highlight entire bracket expression
    ;;http://takeisamemo.blogspot.com/2013/07/emacs.html
    (setq show-paren-style 'expression)
    ;;カーソルの点滅を消す
    (blink-cursor-mode 0)
    ;; echo エリアの表示時間
    (setq echo-keystrokes 0.1)
    ;; echo エリアの表示時間
    (setq echo-keystrokes 0.1)
    ;; linumよりも早い行数表示
    ;; https://garaemon.hatenadiary.jp/entry/2018/07/08/181003
    (leaf leaf-convert
      :config
      (global-display-line-numbers-mode)
      )

    (global-set-key (kbd "C-c t") 'display-line-numbers-mode)
    (global-set-key (kbd "C-c T") 'toggle-truncate-lines)
    ;; 直前/直後の括弧に対応する括弧を光らせます。
    (show-paren-mode)

    ;;括弧の自動補完
    (electric-pair-mode 1)

    ;; highlight entire bracket expression
    ;;http://takeisamemo.blogspot.com/2013/07/emacs.html
    (setq show-paren-style 'expression)

    ;;カーソルの点滅を消す
    (blink-cursor-mode 0)
    ;; emacs の起動画面を消す
    ;; https://pcvogel.sarakura.net/2013/06/17/31151
    (setq inhibit-startup-message t)
    (setq initial-scratch-message nil)

    ;; オートセーブファイルを ~/.emacs.d/backupにつくる
    (setq auto-save-file-name-transforms
          `((".*" ,(expand-file-name "~/.emacs.d/backup/") t)))

    ;; back up の設定
    ;;https://teratail.com/questions/175012
    ;; バックアップファイルを ~/.emacs.d/backupにつくる
    (setq make-backup-files t)
    (setq backup-directory-alist
          (cons (cons "\.*$" (expand-file-name "~/.emacs.d/backup"))
                backup-directory-alist))

  (setq default-frame-alist (append
                 (list
                  '(font . "cica-14")
                  ;; '(font . "SourceHanCodeJP-13")
                  )
                 default-frame-alist))

#+end_src
* leafで書いてある設定
** macrostep
#+begin_src elisp
    (leaf macrostep
    :ensure t
    :bind (("C-c e" . macrostep-expand)))

#+end_src

** imenu
#+begin_src elisp
  (leaf imenu-list
  :config
  (leaf leaf-convert :ensure t)
  (leaf leaf-tree
    :ensure t
    :custom ((imenu-list-size . 30)
             (imenu-list-position . 'right)
             )))
  (setq org-imenu-depth 3)
#+end_src

** org

*** org capture
#+begin_src elisp
  ;; org-capture
  ;; キーバインドの設定
  (global-set-key (kbd "C-c c") 'org-capture)
  (setq work-directory "~/デスクトップ/org/")
  (setq memofile (concat work-directory "memo.org"))
  (setq todofile (concat work-directory "TODO.org"))
  (setq org-capture-templates
        '(
          ("m" "メモ" entry (file+headline memofile "memo")
           "** %?\n*** 参考\n\nEntered on %U\n %i\n %a\n")

          ("p" "プログラミングノート" entry (file+headline  memofile "Programming note")
           "** %? \n - \n   - ヘッダ：\n   - 形式:\n   - 返却値：\n\nEntered on %U\n %i\n %a\n")

          ("c" "チェックボックス" checkitem (file+headline   todofile "checkbox")
           "[ ] %? \n")
          ("t" "TODO" entry (file+headline todofile "ToDo")
           "*** TODO [/] %?\n- [ ] \nCAPTURED_AT: %U\n %i\n")

          ("r" "調査内容" entry (file+headline memofile "Reserch")
           "** %?\nEntered on %U\n %i\n %a\n")

          ("S" "学習内容" entry (file+headline memofile "Study")
           "** %?\nEntered on %U\n %i\n %a\n")

          ("w" "単語帳" item (file+headline memofile "words")
           "- %?\nEntered on %U\n %i\n %a\n")

          ("W" "単語帳（複数語）" entry (file+headline memofile "words")
           "** %?\n - \nEntered on %U\n %i\n %a\n")

          ("l" "記録" entry (file+headline memofile "Log")
           "** %?\nEntered on %U\n %i\n %a\n")

          ("s" "文章" entry (file+headline memofile "文章")
           "** %?\nEntered on %U\n %i\n %a\n")

          ("i" "アイデア" entry (file+headline memofile "アイデア")
           "* %?\nEntered on %U\n %i\n %a\n")

          ("b" "経済" entry (file+headline memofile "Business")
           "** %?\nEntered on %U\n %i\n %a\n")
          )
        )
  (leaf leaf-convert
  :preface
  (defun show-org-buffer (file)
    "Show an org-file FILE on the current buffer."
    (interactive)
    (if (get-buffer file)
	(let ((buffer (get-buffer file)))
	  (switch-to-buffer buffer)
	  (message "%s" file))
      (find-file
       (concat "~/デスクトップ/org/" file))))

  :config
  (global-set-key
   (kbd "C-M-^")
   '(lambda nil
      (interactive)
      (show-org-buffer "memo.org"))))
#+end_src

*** org journal
#+begin_src elisp
(leaf org-journal :ensure t :require t)
  (leaf leaf-convert
    :bind
    (("l" . org-store-link)
     ("c" . org-capture)
     ("a" . org-agenda)
     ("b" . org-iswitchb))
    :require org-journal)

  (global-set-key (kbd "C-c C-j") 'org-journal-new-entry)

#+end_src

*** org agenda
#+begin_src elisp
  (setq org-agenda-files `(,todofile ))
  ;;https://emacs.stackexchange.com/questions/36307/showing-deadline-time-in-agenda-view
  ;; (add-to-list 'org-agenda-custom-commands
  ;;              '("d" "Deadlines"
  ;;                tags "+DEADLINE>=\"<today>\"&DEADLINE<=\"<+2m>\""
  ;;                ((org-agenda-overriding-columns-format
  ;;                  "%25ITEM %DEADLINE %TAGS")))
  ;;              )

#+end_src

*** org babel
#+begin_src elisp
  ;; https://takaxp.github.io/org-ja.html#Top
;; shellに関して
;; https://blog.symdon.info/posts/1641896576/
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (R . t)
   (lisp . t)
   (sql . t)
   (C . t)
   (dot . t)
   (gnuplot . t)
   (org . t)
   (python . t)
   (scheme . t)
   (shell . t)
   (java . t)
   (latex . t)
   (ditaa . t)
   (ocaml . t)
   ))

(setq org-confirm-babel-evaluate nil)

#+end_src

*** org latex
#+begin_src elisp

    ;; latex の設定
    ;;https://orgmode.org/worg/org-tutorials/org-latex-preview.html
    ;; https://qiita.com/clothoid/items/2614635e243ba6225916
    (setq org-latex-create-formula-image-program 'dvipng)
    (setq org-latex-create-formula-image-program 'imagemagick)

    ; -*- Mode: Emacs-Lisp ; Coding: utf-8 -*-

    ;; PATHを追加
    ;; (setenv "PATH"
    ;;   (concat
    ;;    "C:/texlive/2018/bin/win32;"
    ;;    "C:/Users/Administrator/AppData/Local/Programs/Python/Python37/Scripts;"
    ;;    (getenv "PATH")))
    ;; (setq exec-path (parse-colon-path (getenv "PATH")))

    ;; babel の中で tab が ^^I に変換されてしまうので、スペースにする
    (setq-default tab-width 4 indent-tabs-mode nil)

    (require 'ox-latex)
    (require 'ox-beamer)
    ;;; 勝手に入力される \hypersetup{} は使わない(usepackage の順序依存に配慮)
    (setq org-latex-with-hyperref nil)
    (add-to-list 'org-latex-packages-alist "\\hypersetup{setpagesize=false}" t)
    (add-to-list 'org-latex-packages-alist "\\hypersetup{colorlinks=true}" t)
    (add-to-list 'org-latex-packages-alist "\\hypersetup{linkcolor=blue}" t)

    (setq org-latex-pdf-process
          '("platex -shell-escape %f"
            "platex -shell-escape %f"
            "pbibtex %b"
            "platex -shell-escape %f"
            "platex -shell-escape %f"
            "dvipdfmx %b.dvi"))

    (setq org-latex-title-command "\\maketitle")
    (setq org-latex-toc-command
          "\\tableofcontents\n")
    (setq org-latex-text-markup-alist '((bold . "\\textbf{%s}")
                    (code . verb)
                    (italic . "\\it{%s}")
                    (strike-through . "\\sout{%s}")
                    (underline . "\\uline{%s}")
                    (verbatim . protectedtexttt)))
    (setq org-beamer-outline-frame-title "目次")
    (setq org-export-latex-listings t)
    (setq org-latex-listings 'minted)
    (setq org-latex-minted-options
          '(("frame" "lines")
            ;; ("frame" "single")
            ;; ("bgcolor=LightGray")
            ;; latex mintedの背景色をグレーにする
            ;; #+LATEX_HEADER: \usepackage{minted}
            ;; #+LATEX_HEADER: \usepackage{xcolor} % to access the named colour LightGray
            ;; #+LATEX_HEADER: \definecolor{LightGray}{gray}{0.9}
            ("framesep=2mm")
            ;; ("framesep=0mm")
            ("linenos=true")
            ("baselinestretch=1.2")
            ("fontsize=\\small")
            ("breaklines")
            ))

    ;; class は自分で再定義
    ;; NO-DEFAULT-PACKAGES で勝手に入る package を抑制
    ;; (上記のように org-latex-packages-alist で定義すべきかも?)
    (add-to-list 'org-latex-classes
                 '("myjsarticle"
                   "\\documentclass{jsarticle}
    [NO-DEFAULT-PACKAGES]
    \\usepackage[dvipdfmx]{graphicx}
    \\usepackage[dvipdfmx]{color}
    \\usepackage[dvipdfmx]{hyperref}
    \\usepackage{pxjahyper}"
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
      ("\\paragraph{%s}" . "\\paragraph*{%s}")
      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes
                 '("article"
                   "\\documentclass{jsarticle}
    \\usepackage[dvipdfmx]{graphicx}
    \\usepackage[dvipdfmx]{color}
    \\usepackage[dvipdfmx]{hyperref}
    \\usepackage{amsmath}
    \\usepackage{amsfonts}
    \\usepackage{pxjahyper}
    \\usepackage[utf8]{inputenc}
    \\usepackage{fixltx2e}
    \\usepackage{graphicx}
    \\usepackage{longtable}
    \\usepackage{float}
    \\usepackage{wrapfig}
    \\usepackage{rotating}
    \\usepackage[normalem]{ulem}
    ,#+LATEX_HEADER: \let\Re\relax
    ,#+LATEX_HEADER: \DeclareMathOperator{\Re}{Re}
    ,#+LATEX_HEADER: \let\Im\relax
    ,#+LATEX_HEADER: \DeclareMathOperator{\Im}{Im}
    \\usepackage{textcomp}
    \\usepackage{marvosym}
    \\usepackage{wasysym}
    \\usepackage{amssymb}
    \\usepackage{hyperref}
    \\usepackage{mathpazo}
    \\usepackage{color}
    \\usepackage{enumerate}
    \\definecolor{bg}{rgb}{0.95,0.95,0.95}
    \\tolerance=1000
          [NO-DEFAULT-PACKAGES]
          [PACKAGES]
          [EXTRA]
    \\linespread{1.1}
    \\hypersetup{pdfborder=0 0 0}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")))
    (add-to-list 'org-latex-classes
                 '("original"
                   "\\documentclass{jsarticle}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")))
    (add-to-list 'org-latex-classes
                 '("my_article2"
                   "\\documentclass[dvipdfmx,11pt]{jsarticle}
    \\usepackage{siunitx}
    \\usepackage{stix2}
    \\usepackage[sb]{libertine}
    \\usepackage[T1]{fontenc}
    \\usepackage[varqu , varl]{zi4}
    \\usepackage{libertinust1math}
    \\usepackage[cal=stix,scr=boondoxo,bb=boondox]{mathalfa}
    \\numberwithin{equation}{section}
    \\usepackage[top=30truemm,bottom=30truemm,left=25truemm,right=25truemm]{geometry}
    \\usepackage{booktabs}
    \\usepackage{fancyhdr}
    \\usepackage{lastpage}
    \\usepackage[dvipdfmx]{graphicx}
    \\usepackage{subcaption}
    \\usepackage{comment}
    \\usepackage{booktabs}
    \\usepackage{minted}
    ;; \\usepackage{xcolor} % to access the named colour LightGray
    ;; \\definecolor{LightGray}{gray}{0.9}

    \\fancypagestyle{mypagestyle}{
    \\lhead{}
    \\rhead{}
    \\cfoot{}
    \\rfoot{\\thepage/\\pageref{LastPage}}
    \\renewcommand{\\headrulewidth}{0.0pt}
    }
    \\setcounter{page}{0}

    \\makeatletter
        \\renewcommand{\\theequation}{
        \\thesection.\\arabic{equation}}
        \\@addtoreset{equation}{section}

        \\renewcommand{\\thefigure}{
        \\thesection.\\arabic{figure}}
        \\@addtoreset{figure}{section}

        \\renewcommand{\\thetable}{
        \\thesection.\\arabic{table}}
        \\@addtoreset{table}{section}
    \\makeatother
    \\setcounter{tocdepth}{3}
    "))
    (add-to-list 'org-latex-classes
                 '(
                   "koma-jarticle"
                   "\\documentclass[12pt]{scrartcl}
                    [NO-DEFAULT-PACKAGES]
                    \\usepackage{amsmath}
                    \\usepackage{amssymb}
                    \\usepackage{mathrsfs}
                    \\usepackage{xunicode}
                    \\usepackage{fixltx2e}
                    \\usepackage{zxjatype}
                    \\usepackage[ipa]{zxjafont}
                    \\usepackage{xltxtra}
                    \\usepackage{graphicx}
                    \\usepackage{longtable}
                    \\usepackage{float}
                    \\usepackage{wrapfig}
                    \\usepackage{soul}
                    \\usepackage[xetex]{hyperref}
                    \\usepackage{xcolor}
                    \\usepackage{minted}
                    \\usepackage{geometry}
                    \\geometry{left=1cm,right=1cm,top=1cm,bottom=1cm}
                    \\usepackage[natbib=true]{biblatex}
                    \\DeclareFieldFormat{apacase}{#1}
                    \\addbibresource{~/myspace/Bibliography/references.bib}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))


    ;;https://orgmode.org/worg/org-tutorials/org-latex-preview.html
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))

    ;; https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-LaTeX.html
    (setq exec-path (append exec-path '("/Library/TeX/texbin")))
  ;; 2023/02/23コメントアウト
    ;; (leaf auctex :ensure t :require t)
    ;; (load "auctex.el" nil t t)
    ;; (add-hook 'LaTeX-mode-hook 'turn-on-reftex)

  ;; (org-babel-do-load-languages
    ;;  'org-babel-load-languages
    ;;  '((latex . t)))

    ;; latex mintedの背景色をグレーにする
    ;; #+LATEX_HEADER: \usepackage{minted}
    ;; #+LATEX_HEADER: \usepackage{xcolor} % to access the named colour LightGray
    ;; #+LATEX_HEADER: \definecolor{LightGray}{gray}{0.9}
    ;; (setq org-latex-listings 'minted)
    ;; (setq org-latex-minted-options
    ;;       '(("frame" "single") ("linenos=true")("bgcolor=LightGray")))

#+end_src

** undo-tree
#+begin_src elisp
              (leaf undo-tree
          :ensure t :require t
                :global-minor-mode global-undo-tree-mode)
              ;;undo-treeでlinum-modeの設定
            ;;https://www.emacswiki.org/emacs/UndoTree
            (defun undo-tree-visualizer-update-linum (&rest args)
        (linum-update undo-tree-visualizer-parent-buffer)
      (advice-add 'undo-tree-visualize-undo
    :after #'undo-tree-visualizer-update-linum)
  (advice-add 'undo-tree-visualize-redo :after #'undo-tree-visualizer-update-linum)(advice-add 'undo-tree-visualize-undo-to-x :after #'undo-tree-visualizer-update-linum)(advice-add 'undo-tree-visualize-redo-to-x :after #'undo-tree-visualizer-update-linum)(advice-add 'undo-tree-visualizer-mouse-set :after #'undo-tree-visualizer-update-linum)(advice-add 'undo-tree-visualizer-set :after #'undo-tree-visualizer-update-linum))
          ;; undo-treeの一時ファイルを1箇所に集める
          ;; https://www.reddit.com/r/emacs/comments/tejte0/undotree_bug_undotree_files_scattering_everywhere/
          ;; Prevent undo tree files from polluting your git repo
          (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
#+end_src

** counsel,ivy
#+begin_src elisp
  (leaf counsel :ensure t :require t)
  (leaf leaf-convert
  :bind (("" . swiper)
     ("M-x" . counsel-M-x)
     ("C-x C-f" . counsel-find-file)
     ("M-y" . counsel-yank-pop)
     ("<f1> f" . counsel-describe-function)
     ("<f1> v" . counsel-describe-variable)
     ("<f1> l" . counsel-find-library)
     ("<f2> i" . counsel-info-lookup-symbol)
     ("<f2> u" . counsel-unicode-char)
     ("<f2> j" . counsel-set-variable)
     ("C-x b" . ivy-switch-buffer)
     ("C-c v" . ivy-push-view))
  :setq ((search-default-mode function char-fold-to-regexp)
     (ivy-use-virtual-buffers . t)
     (ivy-count-format . "(%d/%d) "))
  :config
  (ivy-mode 1))
  (global-set-key (kbd "C-c V") 'ivy-pop-view)
  (setq ivy-initial-inputs-alist nil)
#+end_src

** beacon
#+begin_src elisp
  (leaf beacon
  :ensure t
    :doc "カーソルを移動した際に点滅される"
    :url "https://github.com/Malabarba/beacon"
  :init
  (let ((custom--inhibit-theme-enable nil))
    (unless (memq 'use-package custom-known-themes)
      (deftheme use-package)
      (enable-theme 'use-package)
      (setq custom-enabled-themes (remq 'use-package custom-enabled-themes)))
    (custom-theme-set-variables 'use-package
                '(beacon-color "green" nil nil "Customized with use-package beacon")))
  :require t
  :config
  (beacon-mode 1))
#+end_src

** end-mark

#+begin_src elisp
   ;;; end-mark.el --- Show mark at the end of buffer

  ;; Author: INA Lintaro <ina@kuis.kyoto-u.ac.jp>

  ;;; License:

  ;; NYSL Version 0.9982 (en)
  ;; ----------------------------------------
  ;; A. This software is "Everyone'sWare". It means:
  ;;   Anybody who has this software can use it as if you're
  ;;   the author.
  ;;
  ;;   A-1. Freeware. No fee is required.
  ;;   A-2. You can freely redistribute this software.
  ;;   A-3. You can freely modify this software. And the source
  ;;       may be used in any software with no limitation.
  ;;   A-4. When you release a modified version to public, you
  ;;       must publish it with your name.
  ;;
  ;; B. The author is not responsible for any kind of damages or loss
  ;;   while using or misusing this software, which is distributed
  ;;   "AS IS". No warranty of any kind is expressed or implied.
  ;;   You use AT YOUR OWN RISK.
  ;;
  ;; C. Copyrighted to INA Lintaro
  ;;
  ;; D. Above three clauses are applied both to source and binary
  ;;   form of this software.

  ;;; Commentary:

  ;; Show mark at the end of buffer.
  ;;
  ;; To use this mode, copy end-mark.el to your load path
  ;; and add to your .emacs:
  ;;
  ;;   (require 'end-mark)
  ;;
  ;; Then M-x end-mark-on enables end-mark-mode in the current buffer.
  ;;
  ;; To automatically enable end-mark-mode in every buffers, add to your .emacs:
  ;;
  ;;   (global-end-mark-mode)

  ;;; Code:

  (defconst end-mark-version "0.01")

  (defgroup end-mark nil
    "Show mark at the end of buffer"
    :group 'convenience)

  (defcustom end-mark-string "[EOF]"
    "String used to indicate the end of buffer."
    :group 'end-mark
    :type 'string)

  (defface end-mark-face
    '((((class color) (min-colors 88) (background dark))
       :foreground "seagreen1")
      (((class color) (min-colors 88) (background light))
       :foreground "seagreen3")
      (((class color) (min-colors 16))
       :foreground "brightgreen")
      (((class color) (min-colors 8))
       :background "green" :foreground "white")
      (((type tty) (class mono))
       :inverse-video t)
      (t :background "gray"))
    "Face of the end mark."
    :group 'end-mark)

  (defcustom end-mark-face 'end-mark-face
    "Face of the end mark."
    :group 'end-mark
    :type 'face)

  (defcustom end-mark-exclude-modes '(dired-mode hexl-mode term-mode)
    "List of major mode symbols not to enable end-mark-mode automatically."
    :group 'end-mark
    :type '(repeat (symbol :tag "Major Mode")))

  (defcustom end-mark-mode-buffers-regexp '("^\\*scratch\\*$")
    "List of regular expressions of buffer names to enable end-mark-mode automatically."
    :group 'end-mark
    :type '(repeat 'string))

  (defcustom end-mark-exclude-buffers-regexp '("^ .*" "^\\*")
    "List of regular expressions of buffer names not to enable end-mark-mode automatically."
    :group 'end-mark
    :type '(repeat 'string))

  (defvar end-mark-overlay nil)
  (make-variable-buffer-local 'end-mark-overlay)

  (defun end-mark-overlay-p () end-mark-overlay)

  (defun end-mark-adjust ()
    (interactive)
    (when (end-mark-overlay-p)
      (move-overlay end-mark-overlay (point-max) (point-max))))

  ;;;###autoload
  (define-minor-mode end-mark-mode
    "Toggle display of mark at the end of buffer."
    :lighter ""                           ; for desktop.el
    (if end-mark-mode
      (progn
        ;; destructor
        (make-local-variable 'change-major-mode-hook)
        (add-hook 'change-major-mode-hook 'end-mark-off)
        ;; end mark object
        (unless (end-mark-overlay-p)
          (setq end-mark-overlay (make-overlay (point-max) (point-max))))
        ;; overlay face
        (set-text-properties 0 (length end-mark-string)
                             `(face ,end-mark-face) end-mark-string)
        (overlay-put end-mark-overlay 'after-string end-mark-string)
        ;; auto adjust
        (overlay-put end-mark-overlay 'insert-behind-hooks
                     '((lambda (overlay after beg end &optional len)
                         (when after (end-mark-adjust))))))
      (when (end-mark-overlay-p)
        (delete-overlay end-mark-overlay)
        (setq end-mark-overlay nil))
      (remove-hook 'change-major-mode-hook 'end-mark-off t)))

  ;;;###autoload
  (define-globalized-minor-mode
    global-end-mark-mode end-mark-mode end-mark-install)

  (defun end-mark-off ()
    (interactive)
    (end-mark-mode 0))

  (defun end-mark-on ()
    (interactive)
    (end-mark-mode 1))

  ;;; adjust when inserting file
  (add-hook 'after-insert-file-functions
            '(lambda (count) (end-mark-adjust) count))

  ;;; install
  (defun end-mark-install ()
    (let ((buf (buffer-name (current-buffer)))
          (mem-pat
           '(lambda (x l)
              (member t (mapcar '(lambda (r) (when (string-match r x) t)) l)))))
      (when (and (not (minibufferp))
                 (not (buffer-base-buffer))
                 (or (funcall mem-pat buf end-mark-mode-buffers-regexp)
                     (not (funcall mem-pat buf end-mark-exclude-buffers-regexp)))
                 (null (memq major-mode end-mark-exclude-modes)))
        (end-mark-on))))

  (provide 'end-mark)
  ;;; end-mark.el ends here
  (leaf leaf-convert
    :hook ((org-mode-hook . end-mark-off))
    :require end-mark
    :config
    (global-end-mark-mode))
#+end_src

** reinbow-delimeters
#+begin_src elisp
  ;;rainbow-delimeter
  (leaf rainbow-delimiters :ensure t :require t)
  ;;https://github.com/Fanael/rainbow-delimiters
  ;;customization
  ;;M-x customize-group rainbow-delimiters
  (leaf leaf-convert
    :hook ((prog-mode-hook . rainbow-delimiters-mode))
    :require rainbow-delimiters)
  ;; 括弧の色を強調する設定
  (leaf leaf-convert
    :preface
    (defun rainbow-delimiters-using-stronger-colors nil
      (interactive)
      (cl-loop for index from 1 to rainbow-delimiters-max-face-count do
               (let ((face (intern
                            (format "rainbow-delimiters-depth-%d-face" index))))
                 (cl-callf color-saturate-name (face-foreground face)
                   30))))

    :hook ((prog-mode-hook . rainbow-delimiters-using-stronger-colors))
    :require cl-lib color)

#+end_src

** company
#+begin_src elisp
  (leaf company
    :ensure t
    :bind ((company-active-map
            ("C-n" . company-select-next)
            ("C-p" . company-select-previous)
            ("C-s" . company-filter-candidates)
            ("<tab>" . company-complete-selection))
           (company-search-map
            ("C-n" . company-select-next)
            ("C-p" . company-select-previous)))
    :config
    (with-eval-after-load 'company
      (add-hook 'prog-mode-hook 'company-mode)
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 2)
      (setq company-selection-wrap-around t)
      (setq company-show-numbers t)))
  (leaf company-tabnine
    :ensure t
    :require t
    :config
    (add-to-list 'company-backends #'company-tabnine))
  ;; https://misohena.jp/blog/2021-08-08-emacs-company-mode-settings.html
  ;; case3
  ;; 基本的に候補は無選択状態から始める。
  ;; 誤って確定してしまうのを防ぐ。
  (setq-default company-selection-default nil)
  (setq-default company-selection nil)

#+end_src

** flycheck
#+begin_src elisp
    (leaf flycheck
    :doc "On-the-fly syntax checking"
    :req "dash-2.12.1" "pkg-info-0.4" "let-alist-1.0.4" "seq-1.11" "emacs-24.3"
    :tag "minor-mode" "tools" "languages" "convenience" "emacs>=24.3"
    :url "http://www.flycheck.org"
    :ensure t
    :bind (("M-n" . flycheck-next-error)
           ("M-p" . flycheck-previous-error))
    :global-minor-mode global-flycheck-mode
    :require t
    )
#+end_src

** dashboard
#+begin_src elisp
  (leaf dashboard :ensure t :require t)
  (leaf leaf-convert
    :setq ((dashboard-items quote
                            ((recents . 10)
                             (projects . 10)))
                                          ; Set the title
           (dashboard-banner-logo-title . "永遠に生きる")
           (dashboard-set-footer)
           (dashboard-startup-banner quote logo)
           (dashboard-set-file-icons . t)
           (dashboard-set-heading-icons . t)
           (dashboard-startup-banner . "~/.emacs.d/emacs_logo_114_2.png")
           )
    :config
    (leaf dashboard
      :ensure t
      :require t
      :config
      (dashboard-setup-startup-hook)))

  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
#+end_src

** reftex
#+begin_src elisp
    ;; latexのbibtexの設定
  ;; reftex
  ;; https://taipapamotohus.com/post/org-mode_paper_3/
  (leaf reftex :ensure t :require t)
  (defun org-mode-reftex-setup ()
    (load-library "reftex")
    (and (buffer-file-name)
         (file-exists-p (buffer-file-name))
         (reftex-parse-all))
    (define-key org-mode-map (kbd "C-c )") 'reftex-citation)
    )
  (add-hook 'org-mode-hook 'org-mode-reftex-setup)
  (leaf bibtex :ensure t :require t)

  ;; So that RefTeX finds my bibliography
  ;; (setq reftex-default-bibliography "/home/kawane/デスクトップ/研究/bibfile/")

#+end_src

** gts(翻訳)
#+begin_src elisp
  ;; deepl
  ;; https://hangstuck.com/emacs-deepl/
  ;; your languages pair used to translate
  (leaf go-translate :ensure t :require t)

  ;; your languages pair used to translate
  (setq gts-translate-list '(("en" "ja") ("ja" "en")))

  ;; config the default translator, it will be used by command gts-do-translate
  (setq gts-default-translator
        (gts-translator

         :picker ; used to pick source text, from, to. choose one.

         ;;(gts-noprompt-picker)
         ;;(gts-noprompt-picker :texter (gts-whole-buffer-texter))
         (gts-prompt-picker)
         ;;(gts-prompt-picker :single t)
         ;;(gts-prompt-picker :texter (gts-current-or-selection-texter) :single t)

         :engines ; engines, one or more. Provide a parser to give different output.

         (list
          ;;(gts-bing-cn-engine)
          (gts-google-engine)
          ;;(gts-google-rpc-engine)
          ;; (gts-deepl-engine :auth-key "d4eda04c-b7ca-7075-def2-7bac3d4e7807" :pro nil)
          ;;(gts-google-engine :parser (gts-google-summary-parser))
          ;;(gts-google-engine :parser (gts-google-parser))
          ;;(gts-google-rpc-engine :parser (gts-google-rpc-summary-parser) :url "https://translate.google.com")
          ;;(gts-google-rpc-engine :parser (gts-google-rpc-parser) :url "https://translate.google.com")
          )

         :render ; render, only one, used to consumer the output result. Install posframe yourself when use gts-posframe-xxx

         (gts-buffer-render)
         ;; (gts-posframe-pop-render)
         ;;(gts-posframe-pop-render :backcolor "#333333" :forecolor "#ffffff")
         ;; (gts-posframe-pin-render)
         ;; (gts-posframe-pin-render :position (cons 1200 20))
         ;;(gts-posframe-pin-render :width 80 :height 25 :position (cons 1000 20) :forecolor "#ffffff" :backcolor "#111111")
         ;;(gts-kill-ring-render)
         ))

  ;;(setq go-translate-buffer-follow-p t)       ; focus the result window
  ;;(setq go-translate-buffer-source-fold-p t)  ; fold the source text in the result window
  ;;(setq go-translate-buffer-window-config ..) ; config the result window as your wish

  (global-set-key (kbd "C-c ?") 'gts-do-translate)


#+end_src

** org-download
#+begin_src elisp
  ;; org-modeで画像のコピペ
  ;;https://github.com/abo-abo/org-download
  (leaf org-download :ensure t :require t)
  ;; Drag-and-drop to `dired`
  (leaf leaf-convert
    :hook ((org-mode-hook . org-download-enable)))

#+end_src

** daemon
#+begin_src elisp
  ;; https://www.yokoweb.net/2017/01/15/macos-emacs-emacsclient/
  ;; server start for emacs-client
  (when window-system                       ; GUI時
    (require 'server)
    (unless (eq (server-running-p) 't)
      (server-start)

      (defun iconify-emacs-when-server-is-done ()
        (unless server-clients (iconify-frame)))

      ;; C-x C-cに割り当てる(好みに応じて)
      ;; (global-set-key (kbd "C-x C-c") 'server-edit)
      ;; M-x exitでEmacsを終了できるようにする
      (defalias 'exit 'save-buffers-kill-emacs)
      ;; 起動時に最小化する
      (add-hook 'after-init-hook 'iconify-emacs-when-server-is-done)
      ;; 終了時にyes/noの問い合わせ
      ;; (setq confirm-kill-emacs 'y-or-n-p)
      )
    )

  (add-to-list 'default-frame-alist '(fullscreen . maximized))

#+end_src

#+RESULTS:
: ((fullscreen . maximized) (font . SourceHanCodeJP-14) (font . SourceHanCodeJP-14) (vertical-scroll-bars))

** projectile
#+begin_src elisp
  ;; https://docs.projectile.mx/projectile/installation.html
(leaf projectile :ensure t :require t)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
(setq projectile-project-search-path '( ("~/work" . 1)))
(setq projectile-completion-system 'ivy)

#+end_src

** treemacs
#+begin_src elisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  ;; (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  ;;   :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  ;;   :ensure t
  ;;   :config (treemacs-set-scope-type 'Perspectives))

  ;; (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  ;;   :after (treemacs)
  ;;   :ensure t
  ;;   :config (treemacs-set-scope-type 'Tabs))
  (with-eval-after-load "treemacs-mode"
    (define-key undo-tree-map (kbd "C-?") nil))

#+end_src

** magit
#+begin_src elisp
  (leaf magit :ensure t :require t)
  (global-set-key (kbd "C-x g") 'magit-status)
#+end_src

** volatile-highlights
#+begin_src elisp
  ;; 操作した際に、操作箇所を強調表示する
(leaf volatile-highlights
  :ensure t
  :require t
  ;; :diminish volatile-highlights-mode
  :config
  (volatile-highlights-mode t))



#+end_src
** theme
*** modus
#+begin_src elisp
  (leaf modus-themes :ensure t :require t :config   (load-theme 'modus-vivendi-tinted t))
  ;; (use-package modus-themes)
  ;; (load-theme 'modus-vivendi-tinted t)
#+end_src
** whitespace
#+begin_src elisp
  (leaf whitespace :ensure t :require t)
  ;; (use-package whitespace)
  ;; 全角スペースを可視化する（cica - sourcehancodejp のため）
  ;; https://qiita.com/itiut@github/items/4d74da2412a29ef59c3a
  ;; (require 'whitespace)
  (setq whitespace-style '(face           ; faceで可視化
                           trailing       ; 行末
                           tabs           ; タブ
                           spaces         ; スペース
                           empty          ; 先頭/末尾の空行
                           space-mark     ; 表示のマッピング
                           tab-mark
                           ))

  (setq whitespace-display-mappings
        '((space-mark ?\u3000 [?\u25a1])
          ;; WARNING: the mapping below has a problem.
          ;; When a TAB occupies exactly one column, it will display the
          ;; character ?\xBB at that column followed by a TAB which goes to
          ;; the next TAB column.
          ;; If this is a problem for you, please, comment the line below.
          (tab-mark ?\t [?\u00BB ?\t] [?\\ ?\t])))

  ;; スペースは全角のみを可視化
  (setq whitespace-space-regexp "\\(\u3000+\\)")

  ;; 保存前に自動でクリーンアップ
  (setq whitespace-action '(auto-cleanup))


  (defvar my/bg-color "#232323")
  (set-face-attribute 'whitespace-trailing nil
                      :background my/bg-color
                      :foreground "DeepPink"
                      :underline t)
  (set-face-attribute 'whitespace-tab nil
                      :background my/bg-color
                      :foreground "LightSkyBlue"
                      :underline t)
  (set-face-attribute 'whitespace-space nil
                      :background my/bg-color
                      :foreground "GreenYellow"
                      :weight 'bold)
  (set-face-attribute 'whitespace-empty nil
                      :background my/bg-color)

  (global-whitespace-mode 1)

#+end_src
** ein
#+begin_src elisp
    ;; einの設定
  ;; https://tam5917.hatenablog.com/entry/2021/03/28/204747
  ;; (use-package ein)
  ;; (use-package ein-notebook)
  ;; (use-package ein-notebooklist)
  ;; (use-package ein-markdown-mode)
  ;; (use-package smartrep)
  ;; (eval-when-compile
  ;;   (require 'ein)
  ;;   (require 'ein-notebook)
  ;;   (require 'ein-notebooklist)
  ;;   (require 'ein-markdown-mode)
  ;;   (require 'smartrep))

  ;; (leaf ein
  ;;   :ensure t
  ;;   :require t)

  ;; (leaf ein-notebook
  ;;   :ensure t
  ;;   :require t)

  ;; (leaf ein-notebooklist
  ;;   :ensure t
  ;;   :require t)

  ;; (leaf ein-markdown-mode
  ;;   :ensure t
  ;;   :require t)

  ;; (leaf smartrep
  ;;   :ensure t
  ;;   :require t)


  ;; (add-hook 'ein:notebook-mode-hook 'electric-pair-mode) ;; お好みで
  ;; (add-hook 'ein:notebook-mode-hook 'undo-tree-mode) ;; お好みで

  ;; ;; undoを有効化 (customizeから設定しておいたほうが良さげ)
  ;; (setq ein:worksheet-enable-undo t)

  ;; ;; 画像をインライン表示 (customizeから設定しておいたほうが良さげ)
  ;; (setq ein:output-area-inlined-images t)

  ;; ;; markdownパーサー
  ;; ;; M-x ein:markdown →HTMLに翻訳した結果を*markdown-output*バッファに出力
  ;; (require 'ein-markdown-mode)

  ;; ;; pandocと markdownコマンドは入れておく
  ;; ;; brew install pandoc
  ;; ;; brew install markdown
  ;; (setq ein:markdown-command "pandoc --metadata pagetitle=\"markdown preview\" -f markdown -c ~/.pandoc/github-markdown.css -s --self-contained --mathjax=https://raw.githubusercontent.com/ustasb/dotfiles/b54b8f502eb94d6146c2a02bfc62ebda72b91035/pandoc/mathjax.js")

  ;; ;; markdownをhtmlに出力してブラウザでプレビュー
  ;; (defun ein:markdown-preview ()
  ;;   (interactive)
  ;;   (ein:markdown-standalone)
  ;;   (browse-url-of-buffer ein:markdown-output-buffer-name))

  ;; ;; smartrepを入れておく。
  ;; ;; C-c C-n C-n C-n ... で下のセルに連続で移動、
  ;; ;; その途中でC-p C-p C-pで上のセルに連続で移動など
  ;; ;; セル間の移動がスムーズになってとても便利
  ;; (declare-function smartrep-define-key "smartrep")
  ;; (with-eval-after-load "ein-notebook"
  ;;   (smartrep-define-key ein:notebook-mode-map "C-c"
  ;;     '(("C-n" . 'ein:worksheet-goto-next-input-km)
  ;;       ("C-p" . 'ein:worksheet-goto-prev-input-km))))

#+end_src
** pdf-tools
#+begin_src elisp
    ;; pdf-tools
  ;; https://github.com/vedang/pdf-tools
  (leaf pdf-tools :ensure t :require t :config (pdf-tools-install))
  (use-package pdf-tools)
  (pdf-tools-install)  ; Standard activation command
  ;; (setq pdf-view-midnight-colors '("#a9b1d6" . "#1a1b26"))

  (add-hook 'pdf-tools-enabled-hook  'pdf-view-themed-minor-mode)
#+end_src
** git-gutter
#+begin_src elisp
  ;; (leaf git-gutter :ensure t
  ;;   :custom
  ;;   (git-gutter:modified-sign "~")
  ;;   (git-gutter:added-sign    "+")
  ;;   (git-gutter:deleted-sign  "-")
  ;; :custom-face
  ;; (git-gutter:modified ((t (:background "#f1fa8c"))))
  ;; (git-gutter:added    ((t (:background "#50fa7b"))))
  ;; (git-gutter:deleted  ((t (:background "#ff79c6"))))
  ;; :config
  ;; (global-git-gutter-mode +1))
  (use-package git-gutter
    :custom
    (git-gutter:modified-sign "~")
    (git-gutter:added-sign    "+")
    (git-gutter:deleted-sign  "-")
    :custom-face
    (git-gutter:modified ((t (:background "#f1fa8c"))))
    (git-gutter:added    ((t (:background "#50fa7b"))))
    (git-gutter:deleted  ((t (:background "#ff79c6"))))
    :config
    (global-git-gutter-mode +1))
#+end_src
** minimap
#+begin_src elisp
  (leaf minimap :ensure t :require t)
  ;; (use-package minimap)
  ;; https://hohei3108.hatenablog.com/entry/2018/02/13/165957
  ;; (require 'minimap)
  ;; (minimap-mode 1); 常に有効にする
  (setq minimap-window-location 'right); windowの位置
  (setq minimap-update-delay 0.2); 表示を更新する時間
  (setq minimap-minimum-width 20); 幅の長さ
  ;; 有効にしたいモード
  (setq minimap-major-modes '(latex-mode
                              LaTeX-mode
                              tex-mode
                              TeX-mode
                              text-mode
                              prog-mode
                              html-mode
                              fundamental-mode
                              csv-mode
                              org-mode))
  ;; 適当なキーに割り当てる
  (global-set-key (kbd "C-x m") 'minimap-mode); toggle

#+end_src
** doom-modeline
#+begin_src elisp
  (leaf doom-modeline  :ensure t :require t :config doom-modeline-mode)
  ;;   (use-package doom-modeline)
  ;; (require 'doom-modeline)
    ;; Whether display the modal state.
    ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
    (setq doom-modeline-modal t)

    ;; Whether display the modal state icon.
    ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
    (setq doom-modeline-modal-icon nil)

    ;; ;; Whether display the battery status. It respects `display-battery-mode'.
    ;; (setq doom-modeline-battery t)

    ;; ;; Whether display the time. It respects `display-time-mode'.
    ;; (setq doom-modeline-time t)


#+end_src
** evil
#+begin_src elisp
  ;; https://github.com/seagle0128/doom-modeline/issues/8
  ;;
  ;; evil-state
  ;;
  ;; (use-package evil)
  ;; (require 'evil)
  (leaf evil :ensure t :require t)
  (doom-modeline-def-segment evil-state
    "The current evil state.  Requires `evil-mode' to be enabled."
    (when (bound-and-true-p evil-local-mode)
      (s-trim-right (evil-state-property evil-state :tag t))))

  (setq evil-normal-state-tag   (propertize "[Normal]" 'face '((:background "green" :foreground "black")))
        evil-emacs-state-tag    (propertize "[Emacs]" 'face '((:background "orange" :foreground "black")))
        evil-insert-state-tag   (propertize "[Insert]" 'face '((:background "red") :foreground "white"))
        evil-motion-state-tag   (propertize "[Motion]" 'face '((:background "blue") :foreground "white"))
        evil-visual-state-tag   (propertize "[Visual]" 'face '((:background "grey80" :foreground "black")))
        evil-operator-state-tag (propertize "[Operator]" 'face '((:background "purple"))))
  (add-hook 'after-init-hook #'doom-modeline-mode)

  (evil-mode 1)
  ;; (evil-set-initial-state 'org-mode 'emacs)
  (setq evil-default-state 'emacs)
  ;; (setq evil-default-state 'normal)

  (setq evil-normal-state-cursor '(box "magenta")
        evil-insert-state-cursor '(bar "medium sea green")
        evil-visual-state-cursor '(hollow "orange")
        evil-emacs-state-cursor '(box "cyan"))

  (evil-set-undo-system 'undo-tree)


  ;; https://qiita.com/acro5piano/items/adaa18258435b870441e
  (bind-keys :map evil-visual-state-map
             ("TAB" . indent-for-tab-command)
             ("#" . comment-dwim))

  (bind-keys :map evil-normal-state-map
             ;; ("SPC b" . ido-switch-buffer)
             ("SPC b" . ivy-switch-buffer)
             ;; ("SPC f" . projectile-find-file)
             ("SPC f" . counsel-find-file)
             ;; ("SPC a" . helm-do-ag-project-root)
             ("SPC a" . ace-window)
             ;; ("SPC x" . smex)
             ;; ("SPC x" . smex)
             ("SPC i" . imenu-list-smart-toggle)
             ("SPC e" . exit)
             ("SPC s" . save-buffer)
             ("SPC /" . swiper)
             ("SPC !" . shell)
             ("SPC d" . dired-jump)
             ("SPC k" . kill-this-buffer)
             ("SPC r" . ido-recentf-open)
             ("SPC 1" . delete-other-windows)
             ("SPC 0" . delete-window)
             ("SPC z" . zone)
             ;; ("SPC q" . save-buffers-kill-terminal)
             ("SPC q" . delete-frame)
             ;; ("SPC t" . xref-find-definitions-other-window)
             ("SPC t" . treemacs)
             ("SPC O" . (lambda nil (interactive) (show-org-buffer "memo.org")))
             ("SPC x" . xref-find-definitions-other-window)
             ;; ("SPC y" . browse-kill-ring)
             ("SPC g" . magit-status)
             ("SPC y" . counsel-yank-pop)
             ("TAB" . indent-for-tab-command)
             ("SPC u" . undo-tree)
             ("SPC @" . toggle-transparency)
             ("SPC SPC" . counsel-M-x))
  (bind-keys :map evil-insert-state-map
             ("C-g" . evil-normal-state))

#+end_src
** keycast
#+begin_src elisp
  ;;   (use-package keycast)
  ;;   (require 'keycast)
  ;; (keycast-header-line-mode)
  (leaf keycast :ensure t :require t :config (keycast-header-line-mode))
#+end_src
** ace-window
#+begin_src elisp
    (use-package ace-window)
  (leaf ace-window :ensure t :require t)
    ;; ace-window
  ;; https://github.com/abo-abo/ace-window
  (global-set-key (kbd "C-x o") 'ace-window)
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  (setq aw-minibuffer-flag 0)

#+end_src
** e2wm
#+begin_src elisp
    ;;https://github.com/kiwanami/emacs-window-manager
  ;; (use-package e2wm)
  ;; (require 'e2wm)
  ;; (global-set-key (kbd "M-+") 'e2wm:start-management)
  (leaf e2wm :ensure t :require t :config (global-set-key (kbd "M-+") 'e2wm:start-management))

#+end_src
** which-key
#+begin_src elisp
  (leaf which-key :ensure t :require t
    :config
  (which-key-mode)
  (which-key-setup-side-window-bottom))
#+end_src
** company slime
#+begin_src elisp
  (leaf slime
  :bind ((company-active-map
	  ("" . company-select-next))
	 (company-active-map
	  ("" . company-select-previous))
	 (company-active-map
	  ("" . company-show-doc-buffer))
	 (company-active-map
	  ("M-." . company-show-location)))
  :setq ((inferior-lisp-program . "/usr/bin/sbcl"))
  :config
  (slime-setup
   '(slime-company)))
#+end_src
** imenu-list
#+begin_src elisp
      ;; imenu-list
      ;; https://github.com/bmag/imenu-list
      (leaf imenu-list :ensure t :require t :config
        (global-set-key (kbd "C-c C-@ o") 'imenu-list-smart-toggle)
      (setq imenu-list-position 'right)
    )

#+end_src
** restart-emacs
#+begin_src elisp
  (leaf restart-emacs :ensure t :require t)
#+end_src

* use-package(require)で書いてある設定
#+begin_src elisp
  ;;   (require 'use-package)
  ;; (use-package all-the-icons
  ;;   :if (display-graphic-p))

#+end_src


* よくわかってないやつ/使うか迷っているやつ
** ace-jump
#+begin_src elisp
  ;; (leaf ace-jump-mode
  ;; :ensure t
  ;; :bind (("C-c j" . ace-jump-mode)))
#+end_src
** calfw
#+begin_src elisp
  ;; (require 'calfw)
  ;; (require 'calfw-org)
  ;; (setq cfw:org-agenda-schedule-args '(:timestamp))
  ;; ;; Month
  ;; (setq calendar-month-name-array
  ;;       ["1月" "2月" "3月" "4月" "5月" "6月" "7月" "8月" "9月" "10月" "11月" "12月"])

  ;; ;; Week days
  ;; (setq calendar-day-name-array
  ;;       ["日曜日" "月曜日" "火曜日" "水曜日" "木曜日" "金曜日" "土曜日"])

  ;; ;; First day of the week
  ;; (setq calendar-week-start-day 0) ; 0:Sunday, 1:Monday

#+end_src
** ditaa
#+begin_src elisp
  ;; https://qiita.com/tnoda_/items/e236c019f6ad0903d320
  ;; (add-to-list 'org-babel-default-header-args:ditaa '(:eps . t))

#+end_src
** sbcl
#+begin_src elisp
  ;; https://lisp-lang.org/learn/getting-started/
(setq inferior-lisp-program "sbcl")
#+end_src
** ewwの画像非表示
#+begin_src elisp
  ;; http://emacs.rubikitch.com/eww-image/
  (defun eww-disable-images ()
    "ewwで画像表示させない"
    (interactive)
    (setq-local shr-put-image-function 'shr-put-image-alt)
    (eww-reload))
  (defun eww-enable-images ()
    "ewwで画像表示させる"
    (interactive)
    (setq-local shr-put-image-function 'shr-put-image)
    (eww-reload))
  (defun shr-put-image-alt (spec alt &optional flags)
    (insert alt))

  (provide 'mylisp-eww-image)

  (defun eww-mode-hook--disable-image ()
    (setq-local shr-put-image-function 'shr-put-image-alt))
  (add-hook 'eww-mode-hook 'eww-mode-hook--disable-image)

#+end_src
** dmacro
#+begin_src elisp
  ;; (leaf dmacro
  ;; :ensure t
  ;; :custom `((dmacro-key . ,(kbd "C-S-e")))
  ;; :global-minor-mode global-dmacro-mode)
#+end_src

* 便利な関数

** my-scratch-buffer
#+begin_src elisp
  ;; scratch buffer をorg-modeで作成するmy-scratch-buffer
;; https://emacs.stackexchange.com/questions/16492/is-it-possible-to-create-an-org-mode-scratch-buffer
;; lawlistさん作
(defun my-scratch-buffer ()
"Create a new scratch buffer -- \*hello-world\*"
(interactive)
  (let ((n 0)
        bufname buffer)
    (catch 'done
      (while t
        (setq bufname (concat "*my-scratch-org-mode"
          (if (= n 0) "" (int-to-string n))
            "*"))
        (setq n (1+ n))
        (when (not (get-buffer bufname))
          (setq buffer (get-buffer-create bufname))
          (with-current-buffer buffer
            (org-mode))
          ;; When called non-interactively, the `t` targets the other window (if it exists).
          (throw 'done (display-buffer buffer t)))))))
#+end_src

** set-alpha
#+begin_src elisp
  ;; 透明度を変更するコマンド M-x set-alpha
  ;; http://qiita.com/marcy@github/items/ba0d018a03381a964f24
  (defun set-alpha (alpha-num)
    "set frame parameter 'alpha"
    (interactive "nAlpha: ")
    (set-frame-parameter nil 'alpha (cons alpha-num '(90))))

#+end_src

** toggle-transparency
#+begin_src elisp
  (defun toggle-transparency ()
    (interactive)
    (let ((alpha (frame-parameter nil 'alpha)))
      (set-frame-parameter
       nil 'alpha
       (if (eql (cond ((numberp alpha) alpha)
                      ((numberp (cdr alpha)) (cdr alpha))
                      ;; Also handle undocumented (<active> <inactive>) form.
                      ((numberp (cadr alpha)) (cadr alpha)))
                100)
           '(60 . 50) '(100 . 100)))))
#+end_src
* end leaf.el
#+begin_src elisp

(provide 'init)

;; Local Variables:
;; indent-tabs-mode: nil
;; End:

;;; init.el ends here

#+end_src
